Gautam Anand
Project 3

Class Design
The board class was implemented using vectors as private member variables. Vectors were used to keep track of the beans in each side because they automatically allocate memory when push back exceeds the limit. Integers were used to represent the amount of beans in the holes for the North and South pot. There were also private member variables that told us about the holes on the board, and the initial beans per hole. No extra private member functions were declared.

The player class has many subclasses. Thesubclasses are badPlayer, smartPlayer and humanPlayer. Because there are subclasses each which have members with their own implementations, I had to use virtual functions. There was a private member defined in Player which held the name variable for the player, so that the name could be printed and assigned to a player object. For humanPlayer, is interactive was defined because it was true in the case of HumanPlayer, but false for every other type of player. Each subclass however, had its on move function defined. Therewere helper functions defined in smartPlayer, which were makeMove, which was the minimax function, which outputs the optimal move given the current player, the checkCapture function, which checked if the board was in a current state to be captured, and if so capture the beans, and random_move, which returned a random hole every time it was called. This last helper function was used in makeMove to give the cpu a hole to choose when the player gets another turn. CheckCapture was also used in makeMove, to move the beans when captured to the corresponding pot.The evaluate function was also used in make move to decide how good the board was.

The Game class has many private members inside of it. It has a board, which helps keep track of the current state of the game. It has pointers to both player 1 and player 2, so that the move functions for each of theses players can be accessed. There is a Side object cp, which keeps track of the current player in the game, so that the player can be switched every turn inside of the move function. There is a Side object called g_winner, which holds the winner of the game, which is updated in the move function. There is a bool called g_over, which represents the state of the game. So in the play function, there is a while loop running until g_over turns true.



Design for SmartPlayer move function
First check if the game is over, if the game is over return -1

Initialize an integer value, and assign int besthole to a random hole on the board. 
Create a temp board, and set it equal to the board argument passed into chooseMove.

Make the move given the current side s, the current temp board, the bestHole, the current value, and a depth of zero.
The make move function is the minimax function in this case, and that will be recursively called to explore the “tree” of moves possible at the current state of the board. Every time this is done, then depth will be incremented until depth reaches the max depth value.The heuristic in this case was assigned using different weights. If the board was configured in a way that would allow the player to win in a move, then that board is assigned a high value(+ or -) depending on the side and this value was 1000. If the board was configured in a way that would allow the player to capture, then that board is assigned +- 100 depending on the side.
If the board was configured in a way that would allow the player to take another turn, then that board is assigned +- 50 depending on the side. If none of conditions are satisfied, then teh evaluate function just return the difference between the pots.

Return the best Hole returned by the makeMove function. 

(pseudocode 
PseudoCode for Nontrival algorithms

int Board::beans(Side s, int hole) const

If the side is North, and the hole is the pot, return the beans in the pot. 
If the side is South, and the hole is the pot, return the beans in the pot. 
If the hole is greater than the amount of holes, return -1
If the side is north and the hole in question doesn’t have zero beans, return the amount of beans in the hole.
If the side is south and the hole in question doesn’t have zero beans, return the amount of beans in the hole.
Else, return zero

​​int Board::beansInPlay(Side s) const
Set an integero count to zero.
If the side is North, iterate through all the holes and add the beans to total.
If the side is South, iterate through all the holes and add the beans to total.
Return the total beans. 

bool Board::sow(Side s, int hole, Side& endSide, int& endHole)
Set two bools, both equal to false. 
Check if its a valid hole, else return false
Assign an integer to the amount of beans in that hole
If the side is south, set the corresponding hole to zero
If the side is north, set the corresponding hole to zero
While the number of beans is not equal to zero
	If Side is South
	If the hole is less than the total holes, subtract one bean, add a bean to the next hole, and increment hole.
	Else if the next hole is a pot, decrement beans, add one bean to the pot set the bool in the beginning equal to true.
		If there are still more beans to put in the pots, switch side to North, set holes to total holes+1 and set the boolean that was just changed to false.
	Else
	If the hole is less than the total holes, subtract one bean, add a bean to the next hole, and increment hole.
	Else if the next hole is a pot, decrement beans, add one bean to the pot set the bool in the beginning equal to true.
		If there are still more beans to put in the pots, switch side to North, set holes to 0 and set the boolean that was just changed to false.
If the side is south,and the hole is the total holes and the bool corresponding to the south side is true, set endhole equal to hole+1 and endside to South. 
If the side is Noth,and the hole is 1 and the bool corresponding to the south side is true, set endhole equal to hole-1 and endside to North. 
Else, set endhole to hole, and endside to s. 
Return true

bool Board::moveToPot(Side s, int hole, Side potOwner)
If its an invalid hole, return false
If the potowner is south, 
If the side is south, add the beans in the hole to the potowners side, and set that hole that was just taken from to zero beans. 
Else
If the side is south, add the beans in the hole to the potowners side, and set that hole that was just taken from to zero beans. 
	
If the potowner is north, 
If the side is south, add the beans in the hole to the potowners side, and set that hole that was just taken from to zero beans. 
Else
If the side is south, add the beans in the hole to the potowners side, and set that hole that was just taken from to zero beans. 

Return true

int HumanPlayer::chooseMove(const Board& b, Side s) const
If there are no moves left to make, return -1
Set an int equal to 0
Ask for user input for a hole
While the input is invalid, keep asking for user input for a valid hole.
Return the hole number when the hole is valid

int BadPlayer::chooseMove(const Board& b, Side s) const
If there is no valid move, then return -1
For every hole possible
	If the hole is valid, then return the hole
Return -1


void SmartPlayer::makeMove(Side s, Board&  b,int &bestHole, int &value, int depth) const
    if s equals south, then set a large negative value for value, else set a large positive value for when player is north

    If the game is over then move all the beans into the corresponding pots
        Set bestHole = -1

       If south wins, then set a large positive value
       If north wins, then set a large negative value
       Else it is a tie, and set value to zero
        return

    if depth is greater than or equal to 5
        Set bestHole = -1

        If s equals South, then set value to the evaluate function of the board
        Else set value to the evaluate function of the board
        return

    For all holes on the board
        Set variables to store the end side and hole
        Make a temp board and check if the sow using the hole in the for loop is successful
            After the move is made, see if the move meets the conditions for a capture to take place and set value to the value in the pot after the capture takes place

            While the side is still the current side, make a random move and then check if that random move is valid, if so then increment the value

            Create two variables to store the best hole and the best value for the opponent
            Make move for the opponent, recursive call

            Unmake the move
	If s is north, then if the new value is less than value, then set best hole equal to i and the value equal to the new value
	If s is south then if the new value is greater than value, then set besthole equal to i and value equal to v2

    Return

int SmartPlayer::evaluate_board(Board &b, Side s) const 

For every hole on the board on a side
	If it is sowable
		If the sow leads to a win, assign a high value to the value depending on the side
		If the sow leads to a capture, assign a less high value to the value depending on the side
		If the sow leads to another turn, assign a less high value to the value depending on the side
If the current value of value is less than or greater than(depending on the side)
	Replace value with whatever isi best for the current player and return that value
Return the difference between the pots as a default value 
void Game::status(bool& over, bool& hasWinner, Side& winner) const
If game is over, set over to false
Else over is true

Set whichever players’ pot with more beans equal to the win and set hasWinner to true
If there are equal beans in the pot then set hasWinner to false

bool Game::move(Side s)
Let player 1 take a turn that is valid, and capture if needed 
Dispaly the board
Do the above while the end hole of sowing is the same as the current side and the game is not over
If the game for one side is over
	Move all the beans on the other side to the other pot, and set g_over to true
	Check win conditions and set winner depeding on who has more beans in the pot
	Return false
Switch player
Return true
Let player 2 take a turn that is valid, and capture if needed 
Dispaly the board
Do the above while the end hole of sowing is the same as the current side and the game is not over
If the game for one side is over
	Move all the beans on the other side to the other pot, and set g_over to true
	Check win conditions and set winner depeding on who has more beans in the pot
	Return false
Switch player
Return true

void Game::play()

While g_over is not true
	If both players aren’t human
		Press enter to have the current side make a move
	Else
		Have the current side make a move
Display the board
Print out the winner 

Bugs and Other Problems
One problem that I had encountered initially was counting the holes. I ended up using separate private variables in order to represent the pots. Also infinite recursion in the program was a problem, and this was solved through implementing correct conditionals in the while loop so that the code doesn’t run forever. 


Test Cases

These test cases test out whether the board class is functional. This is done by making sure that the constructor for board works and also functions that move the beans and that return the beans on the board also work. This also tests the moving functionality of the board. Also test if the player remains the same if the the last bean lands into the players pot. Also check if that the other players pot is passed, it is not filled. 

Board b(3, 2);
assert(b.holes() == 3  &&  b.totalBeans() == 12  &&
b.beans(SOUTH, POT) == 0  &&  b.beansInPlay(SOUTH) == 6);
b.setBeans(SOUTH, 1, 1);
b.moveToPot(SOUTH, 2, SOUTH);
assert(b.totalBeans() == 11  &&  b.beans(SOUTH, 1) == 1  &&
b.beans(SOUTH, 2) == 0  &&  b.beans(SOUTH, POT) == 2  &&
b.beansInPlay(SOUTH) == 3);
Side es;
int eh;
b.sow(SOUTH, 3, es, eh);
assert(es == NORTH  &&  eh == 3  &&  b.beans(SOUTH, 3) == 0  &&
b.beans(NORTH, 3) == 3  &&  b.beans(SOUTH, POT) == 3  &&
b.beansInPlay(SOUTH) == 1  &&  b.beansInPlay(NORTH) == 7);

Board b(1,1);
b.sow(SOUTH, 1,es,eh);
assert(es == SOUTH && eh = 2);

Board b(1,1);
b.sow(NORTH, 1,es,eh);
assert(es == NORTH && eh = 2);

Board b(2,4);
b.sow(NORTH, 2,es,eh);
assert(b.beans(NORTH, 0)==0);



Test the functionality of the player class and all of its subclasses. Make sure that the constructor for players work and that the name registers. Also make sure that the virtual function isInteractive works, and the only players that are interactive are the human players. Make sure that the choose move function for each player works, including bad and the smart player.


HumanPlayer hp("Marge");
assert(hp.name() == "Marge"  &&  hp.isInteractive());
BadPlayer bp("Homer");
assert(bp.name() == "Homer"  &&  !bp.isInteractive());
SmartPlayer sp("Lisa");
assert(sp.name() == "Lisa"  &&  !sp.isInteractive());
Board b(3, 2);
b.setBeans(SOUTH, 2, 0);
 cout << "=========" << endl;
int n = hp.chooseMove(b, SOUTH);
cout << "=========" << endl;
assert(n == 1  ||  n == 3);
n = bp.chooseMove(b, SOUTH);
assert(n == 1  ||  n == 3);
n = sp.chooseMove(b, SOUTH);
assert(n == 1  ||  n == 3);


Test the functionality of the game, see if the end conditions are met and that display displays the right board at each point in the game. Check if the status function works and also if the game ends when its supposed to. Check if the beans function that was implemented in the game class also works correctly when the hole provided is the pot.

 BadPlayer bp1("Bart");
	    BadPlayer bp2("Homer");
	    Board b(3, 0);
	    b.setBeans(SOUTH, 1, 2);
	    b.setBeans(NORTH, 2, 1);
	    b.setBeans(NORTH, 3, 2);
	    Game g(b, &bp1, &bp2);
	    bool over;
	    bool hasWinner;
	    Side winner;
	      //    Homer
	      //   0  1  2
	      // 0         0
	      //   2  0  0
	      //    Bart
	    g.status(over, hasWinner, winner);
	    assert(!over && g.beans(NORTH, POT) == 0 && g.beans(SOUTH, POT) == 0 &&
		g.beans(NORTH, 1) == 0 && g.beans(NORTH, 2) == 1 && g.beans(NORTH, 3) == 2 &&
		g.beans(SOUTH, 1) == 2 && g.beans(SOUTH, 2) == 0 && g.beans(SOUTH, 3) == 0);

	    g.move(SOUTH);
	      //   0  1  0
	      // 0         3
	      //   0  1  0
	    g.status(over, hasWinner, winner);
	    assert(!over && g.beans(NORTH, POT) == 0 && g.beans(SOUTH, POT) == 3 &&
		g.beans(NORTH, 1) == 0 && g.beans(NORTH, 2) == 1 && g.beans(NORTH, 3) == 0 &&
		g.beans(SOUTH, 1) == 0 && g.beans(SOUTH, 2) == 1 && g.beans(SOUTH, 3) == 0);

	    g.move(NORTH);
	      //   1  0  0
	      // 0         3
	      //   0  1  0
	    g.status(over, hasWinner, winner);
	    assert(!over && g.beans(NORTH, POT) == 0 && g.beans(SOUTH, POT) == 3 &&
		g.beans(NORTH, 1) == 1 && g.beans(NORTH, 2) == 0 && g.beans(NORTH, 3) == 0 &&
		g.beans(SOUTH, 1) == 0 && g.beans(SOUTH, 2) == 1 && g.beans(SOUTH, 3) == 0);

	    g.move(SOUTH);
	      //   1  0  0
	      // 0         3
	      //   0  0  1
	    g.status(over, hasWinner, winner);
	    assert(!over && g.beans(NORTH, POT) == 0 && g.beans(SOUTH, POT) == 3 &&
		g.beans(NORTH, 1) == 1 && g.beans(NORTH, 2) == 0 && g.beans(NORTH, 3) == 0 &&
		g.beans(SOUTH, 1) == 0 && g.beans(SOUTH, 2) == 0 && g.beans(SOUTH, 3) == 1);

	    g.move(NORTH);
	      //   0  0  0
	      // 1         4
	      //   0  0  0
	    g.status(over, hasWinner, winner);
	    assert(over && g.beans(NORTH, POT) == 1 && g.beans(SOUTH, POT) == 4 &&
		g.beans(NORTH, 1) == 0 && g.beans(NORTH, 2) == 0 && g.beans(NORTH, 3) == 0 &&
		g.beans(SOUTH, 1) == 0 && g.beans(SOUTH, 2) == 0 && g.beans(SOUTH, 3) == 0);
	    assert(hasWinner && winner == SOUTH);

These tests were done and the game was played in order to make sure that the recursion does not exceed the maximum time needed, which in this case is 5 seconds per move. This was achieved trough using a large board, in which many ssearches were needed to find the best move possible.

 HumanPlayer bp1("Bart");
        SmartPlayer bp2("Homer");
        Board b(30, 5);
        Game g(b, &bp1, &bp2);
        g.play();
